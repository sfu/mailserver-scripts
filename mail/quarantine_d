#!/usr/bin/perl
#
# This script manages the Sendmail Quarantine queue and whitelist
# The queue is used by the rate limiting milter, which flags messages
# for quarantine if the sender sends to too many non-sfu recipients in
# a day. 
#
# Create an xinetd entry to invoke this script when connections 
# come in on the desired port. For additional security, use xinetd's
# config to limit what IP addresses can connect

use Socket;
use Getopt::Std;
use JSON;
use DB_File;
use GDBM_File;
use Sys::Hostname;
use FindBin;
use lib "$FindBin::Bin/../lib";
use IO::Socket::INET;
use ICATCredentials;
use MIME::Base64;
use MIME::Parser;


$hostname = hostname();

# List of services that could be running on this host. We use this to
# determine which commands to allow
my %service;
@services = ("sendmail","mailfromd");
getServices();

# json file describing the files we allow access to
$files_loc = "/etc/mail/managed_files.json";

# default list of files we're allowed to alter remotely (if above file can't be found)
$files = { accessdynamic =>
			{
				path => "/etc/mail/access.dynamic",
				type => "access", # file type: sendmail access file
				access => "rwa", # access: r=read, w=overwrite, a=append
				postcmd => "cat /etc/mail/access.static /etc/mail/access.dynamic > /etc/mail/access; /usr/bin/makemap hash /etc/mail/access.db < /etc/mail/access"
			},
			accessstatic =>
			{
				path => "/etc/mail/access.static",
				type => "access",
				access => "ra",
				postcmd => "cat /etc/mail/access.static /etc/mail/access.dynamic > /etc/mail/access; /usr/bin/makemap hash /etc/mail/access.db < /etc/mail/access"
			},
			access =>
			{
				path => "/etc/mail/access.db",
				type => "DB_File", # file type: standard Berkeley DB file, used by Sendmail
				access => "r",
			},
			virtusertable =>
			{
				path => "/etc/mail/virtusertable",
				type => "access",  # Not the same as an access db, but accessed the same way
				access => "ra",
				postcmd => "/usr/bin/makemap hash /etc/mail/virtusertable.db < /etc/mail/virtusertable"
			}, 
			mailfromdwhitelist =>
			{
				path => "/usr/local/var/mailfromd/whitelist.gdbm",
				type => "GDBM_File", # gnu dbm file, used by mailfromd DBs
				access => "rwa",
				hastext => "1",
				postcmd => "/usr/local/bin/gdbmmake /usr/local/var/mailfromd/whitelist"
			}
		 };

# Only accept connections from authorized hosts
$| = 1;
if (defined($ENV{'REMOTE_ADDR'})) {
    $peeraddr = inet_aton($ENV{'REMOTE_ADDR'});
} else {
    $sockaddr = 'S n a4 x8';
    $peersockaddr = getpeername(STDIN);
    ($family, $port, $peeraddr) = unpack($sockaddr, $peersockaddr);
    ($a, $b, $c, $d) = unpack('C4', $peeraddr);
    $peer = "$a.$b.$c.$d";
}

($peername, $aliases, $addrtype, $length, @addrs) = gethostbyaddr($peeraddr, AF_INET);

if (!( $peername =~ /^garibaldi3.tier2.sfu.ca/ ||
       $peername =~ /^garibaldi4.tier2.sfu.ca/ ||
       $peername =~ /^hatzic-stage[12].tier2.sfu.ca/ ||
       $peername =~ /^mailgw1.tier2.sfu.ca/ ||
       $peername =~ /^mailgw2.tier2.sfu.ca/ ||
       $peername =~ /^pobox1.tier2.sfu.ca/ ||
       $peername =~ /^pobox2.tier2.sfu.ca/ ||  
       $peername =~ /^lcp-.*\.dc.sfu.ca/ ||
       $peername =~ /^load-balancer.sfu.ca/ ||
       $peername =~ /^$hostname/ )) { 
    print "Bye $peername!\n";
    exit 0; 
} 

load_files($files_loc);

print "ok\n";

$cmd = <>;
$cmd =~ s/[\r\n]+//;


#sub usage()
#{
#    print <<EOF;
#Usage:
#   quarantine [-q]                - View the quarantine queue
#   quarantine -w [-a|-d  address] - View or manage the whitelist
#   quarantine -v Message-ID       - View a quarantined message
#   quarantine -d regex            - Delete messages from the quarantine queue on both rm-rstar1&2
#   quarantine -r QueueID          - Release message with this Queue Identifier
#
#You must be ROOT for all but the first variant
#
#EOF
#}


# Human-readable queue summary
if ($cmd eq "queue")
{
	$result = `mailq -qQ`;
	print $result;
	exit 0;
}

if ($cmd =~ "^(queuebb|queuejson|mailq)")
{
	printQueue($cmd);
	exit 0;
}

if ($cmd =~ /^view ([\w\d]+)$/)
{
	# View a quarantined message
	$qid = $1;
	$content = "";
	my $loc = `find /var/spool/mqueue -name hf$qid`;
	chomp($loc);
	if (! -e $loc)
	{
		print "ERROR: Header file $loc not found\n";
		exit 0;
	}
	my $header = `cat $loc`;
	$loc =~ s/\/hf/\/df/;
	if (! -e $loc)
	{
		print "ERROR: Message Body file $loc not found\n";
		exit 0;
	}
	my $msgbody = `cat $loc`;
	my $rfcmsg = "";
	# Do some cleanup of the raw message before displaying it
	my @headers = split(/\n/,$header);
	my $rfcheader = "";
	my $inheaders = 0;
	foreach (@headers)
	{
		if (/^([TK])(\d+)/)
		{
			$content .= "TIME_$1: " . scalar(localtime($2)) . "\n";
		}
		elsif (/^q(.*)/)
		{
			$content .= "REASON: $1\n";
		}
		elsif (/^N(\d+)/)
		{
			$content .= "ATTEMPTS: $1\n";
		}
		elsif (/^R(.*)/)
		{
			$to = $1;
			if ($to =~ /[A-Z]+:(.*)/)
			{
				$to = $1;
			}
			$content .= "RCPT: $to\n";
		}
		elsif (/^S(.*)/)
		{
			$content .= "FROM: $1\n";
		}
		elsif (/\$_(.*)/)
		{
			$content .= "CLIENT: $1\n";
		}
		elsif (/^H\?[A-Z]*\?(.*)/)
		{
			$h = $1;
			# in headers
			if (!$inheaders)
			{
				$inheaders = 1;
				$content .= "\n";
			}
			if ($h =~ /^Subject: (.*)/)
			{
				$subj = _decode($1);
				$h = "Subject: $subj";
			}

			$content .= "$h\n";
			$rfcmsg .= "$h\n";
		}
		elsif ($inheaders && /^(\s+.*)/)
		{
			$content .= "$1\n";
			$rfcmsg .= "$1\n";
		}
	}
	# Parse the message body so we're not just sending raw (potentially Base64) text
	$rfcmsg .= "\n$msgbody";

	$parser = new MIME::Parser;
	if ($entity = $parser->parse_data($rfcmsg))
	{
		@parts = $entity->parts();
		if (!scalar(@parts))
		{
			# Nothing to do, just let it print the existing msgbody
		}
		else
		{
			# For now, just print the first part of message and assume that's enough
			# assumption that part0 of the multipart will be the text part
			eval {
                            if (defined($parts[0]->parts(0)))
                            {
                                $nmsgbody = $parts[0]->parts(0)->bodyhandle()->as_string();
                            }
                            else
                            {
                                $nmsgbody = $parts[0]->bodyhandle()->as_string();
                            }
                            # We only get here if there were no MIME errors
                            $msgbody = $nmsgbody;
			};
			if ($@)
			{
				$msgbody = "BODY: Unable to MIME Parse message\n\n$msgbody";
			}
		}
	}
	else
	{
		$msgbody = "BODY: Unable to MIME Parse message\n";
	}

	print $content . "\n" . $msgbody;
	exit 0;
}

if ($cmd =~ /^delete ([\w\d\.\+\?\*\[\]\-\^\$@%\(\)=:;,]+)$/)
{
	$regex = $1;
	system("/usr/local/etc/cleanqueue -q \"$regex\"");
	exit 0;
}

if ($cmd =~ /^deleteI ([\w\d]+)$/)
{
	$qid = $1;
	system("find /var/spool/mqueue \\( -name hf$qid -o -name df$qid \\) -exec rm '{}' \\;");
	exit 0;
}

if ($cmd =~ /^release([IRS]) ([\w\d\.\+\?\*\[\]\-\^\$@%\(\)=:;,]+)$/)
{
	$what = $2;
	$type = $1;
	system("/usr/sbin/sendmail -qQ -Q -q$type$what");
	exit 0;
}

if ($hostname =~ /^mailgw1/ && $cmd =~ /^sendexchange (getqueue|getdatabases)$/)
{
	$excmd = $1;
	$cred  = new ICATCredentials('exchange.json')->credentialForName('daemon');
	$TOKEN = $cred->{'token'};
	$SERVER = $cred->{'server'};
	$EXCHANGE_PORT = $cred->{'port'};
	$res = process_exch_cmd($SERVER, $EXCHANGE_PORT, "$TOKEN $excmd");
	print $res;
	exit 0;
}

if ($cmd =~ /^get ([a-z]+)$/)
{
	$what = $1;
	if (defined($files->{$what}))
	{
		$res = getFile($what);
		print $res,"\n";
	}
	else
	{
		print "$what: unknown entity\n";
	}
	exit 0;
}

if ($cmd =~ /^(append|write) ([a-z]+) (.+)$/)
{
	$action = $1; $what = $2; $jsonstr = $3;
	$act = ($action eq "write") ? "w" : "a";
	if (defined($files->{$what}))
	{
		$res = writeOrAppendFile($act,$what,$jsonstr);
		print $res,"\n";
	}
	else
	{
		print "$what: unknown entity\n";
	}
	exit 0;
}

if ($cmd =~ /^test$/)
{
	$jsonobj = JSON->new->allow_nonref;
	print $jsonobj->encode($files);
	exit 0;
}


print "unknown command: $cmd\n";
exit 0;


# Print summary for Xymon/big Brother
# First line is number of quarantine'd msgs
# If non-zero, include summary of users, msgs, recipients, subjects
#
# Overloaded to handle non-quarantined queues, but only in json format. Optionally specify "R|Sdomain" to
# limit output to receiving or sending domain
#
# Now overloaded to handle json output for a web friendly version. Parse QF files to populate hash for json
# QF looks like this:
# V8
# T1481617801
# K1481665051
# N16
# P1475902
# I253/0/783874
# B7BIT
# MDeferred: Connection refused by sfuchildcare.ca.
# Fwbs
# $_[119.28.98.251]
# $rESMTP
# $ssawadika13.top
# ${daemon_flags}
# ${if_addr}192.168.99.109
# S<bounce-452-96378416-452-248@sawadika13.top>


sub printQueue()
{
	my $cmd = shift;
	$view = 0; $json = ($cmd=~"^(queuejson|mailq)") ? 1 : 0;
	$ftype = ($cmd =~ "^mailq") ? "qf" : "hf";
	if ($cmd =~ /^queuebb -v (.*)$/)
	{
	    $view = $1;
	}
	if ($cmd =~ /^queuejson (.*)$/)
	{
	    $limit = $1;
	    $limit = 0 if ($limit < 0);
	}
	$domaintype = 0;
	if ($cmd =~ /mailq (R|S)(.*)$/)
	{
		$domaintype = ($1 eq "R") ? 1 : 2;
		$domainfilter = $2;
	}
	@qfiles = `find /var/spool/mqueue -name "${ftype}*" -print`;
	$total = @qfiles;
	print "$total\n" if (!$json);
	my %jsondata;
	$jsondata{total} = $total;
	if ($total)
	{
	    $count = 0;
	    $jsondata{messages} = [];
	    foreach $qf (@qfiles)
	    {
			my (%qdata);
			my $recips = 0;
			$qf =~ m/\/$ftype(.+)$/;
			$qid = $1;
			push(@qids, $qid);
			open(QF,$qf);
			@lines = <QF>;
			close QF;
			# domaintype is non-zero if we're searching for a specific sender or recipient
			$found = ($domaintype) ? 0 : 1;
			foreach $l (@lines)
			{
			    chomp;
			    if ($l =~ /^r/)
			    {
			    	$recips++;
			    	$found = 1 if (!$found && $domaintype == 1 && $l =~ /$domainfilter$/);
			    }
			    elsif (!$found && $domaintype == 2 && $l =~ /^S.*$domainfilter>$/)
			    {
			    	$found = 1;
			    }
			    elsif ($l =~ /\$_(.*)/)
			    {
					$hosts{$1} .= "$qid:";
					$qdata{host} = $1;
			    }
			    elsif ($l =~ /X-Authenticated-User: (.*)/)
			    {
					$qid{$1} .= "$qid:";
					$qdata{authuser} = $1;
			    }
			    elsif ($l =~ /Subject: (.*)/)
			    {
					$subject{$qid} = _decode($1);
					$qdata{subject} = $1;
			    }
			    elsif ($l =~ /^T(\d+)$/)
			    {
					$qdata{ctime} = $1;
			    }
			    elsif ($l =~ /^K(\d+)$/)
			    {
					$qdata{mtime} = $1;
			    }
			    elsif ($l =~ /^S<?([^>]+)>?/)
			    {
					$qdata{sender} = $1;
			    }
			    elsif ($l =~ /^M(.*)$/)
			    {
			    	$qdata{reason} = $1;
			    }
			}
			if ($found)
			{
				$qdata{id} = $qid;
				$recips{$qid} = $recips;
				$qdata{recips} = $recips;
				push(@{$jsondata{messages}},\%qdata);
				$count++;
			}
			last if ($limit && $count == $limit);
	    }

	    if (!$json)
	    {
	        # Summarize results
	        print "Unique SFUConnect users seen:\n" if (!$view);
	        foreach $user (keys %qid)
	        {
		    @msgs = split(/:/,$qid{$user});
		    if ($view) { 
		        next if ($user ne $view); 
		        $qid = $msgs[0];
		        system("find /var/spool/mqueue -name hf$qid -exec cat '{}' \\;; find /var/spool/mqueue -name df$qid -exec cat '{}' \\;");
		        exit 0;
		    }
		    $count = @msgs;
		    $recips = 0;
		    foreach (@msgs) { $recips += $recips{$_}; }
		    print "Sender: $user\tMsgs: $count\tRecipients: $recips\n";
		    print "  Sample: $msgs[0]\n";
		    print "  Subject: ",$subject{$msgs[0]},"\n";
	        }
    
	        print "Unique hosts seen:\n";
	        foreach $host (keys %hosts)
	        {
		    @msgs = split(/:/,$hosts{$host});
		    $count = @msgs;
		    $recips = 0;
		    foreach (@msgs) { $recips += $recips{$_}; }
		    print "Host: $host\tMsgs: $count\tRecipients: $recips\n";
		    print "  Sample: $msgs[0]\n";
		    print "  Subject: ",$subject{$msgs[0]},"\n";
	        }
	    }
	}
	if ($json)
	{
		$jsondata{total} = scalar(@{$jsondata{messages}}) if ($domaintype);
	    $jsonobj = JSON->new->allow_nonref;
	    print $jsonobj->encode(\%jsondata),"\n";
	}
}

# Determine which services are running on this host by using either the 'service' or 'systemctl' command
# Currently only supports RH/CentOS 6/7 hosts
sub getServices()
{
    $systemd = 1 if (-e "/usr/bin/systemctl"); 
    foreach my $s (@services)
    {
    	$enable = 0;
    	if ($systemd)
    	{
    		$res = `/usr/bin/systemctl status $s 2>/dev/null`;
    		$enabled = 1 if ($res =~ /Loaded: loaded.*enabled/);
    	}
    	else
    	{
    		$res = `service $s status 2>/dev/null`;
    		$enabled = 1 if ($res =~ /is running/);
    	}
	$service{$s} = $enabled;
    }
}

sub getFile()
{
	$file = shift;
	return "" if (!defined($files->{$file}->{'path'}));
	if ($files->{$file}->{'type'} =~ /^G?DBM?_File$/)
	{
		$mode = ($files->{$file}->{'type'} eq "GDBM_File") ? GDBM_READER : O_RDONLY;
		tie %content,$files->{$file}->{'type'},$files->{$file}->{'path'},$mode,0666,$DB_HASH;
		$jsonobj = JSON->new->allow_nonref;
	    $res = $jsonobj->encode(\%content);
	    untie %content;
	}
	elsif ($files->{$file}->{'type'} eq "access")
	{
		# Sendmail 'access'-style text file. Treat each line as a key/value pair and convert to json
		my %content;
		open(IN,$files->{$file}->{'path'});
		while(<IN>)
		{
			next if (/^#/);
			chomp;
			($key,$val) = split(/\s+/,$_,2);
			$content{$key} = $val;
		}
		close IN;
		$jsonobj = JSON->new->allow_nonref;
	    $res = $jsonobj->encode(\%content);
	}
	return $res;
}

sub writeOrAppendFile()
{
	my ($type,$file,$json) = @_;
	my $hastext = 0;
	return "err" if (!defined($files->{$file}->{'path'}));
	return "err" if (($type eq "w" && $files->{$file}->{'access'} !~ /w/) || ($files->{$file}->{'access'} !~ /a/));
	my $jsonobj = JSON->new->allow_nonref;
	my $data = $jsonobj->decode($json);
	my $output_type = ($type eq "w") ? ">" : ">>";
	if ($files->{$file}->{'type'} =~ /^G?DBM?_File$/)
	{
		if (ref($data) ne "HASH")
		{
			return "err: wrong data type";
		}
		$mode = ($files->{$file}->{'type'} eq "GDBM_File") ? GDBM_WRCREAT : O_RDWR;
		tie %content,$files->{$file}->{'type'},$files->{$file}->{'path'},$mode,0666,$DB_HASH;
		if ($files->{$file}->{'hastext'})
		{
			my $fname = $files->{$file}->{'path'};
			$fname =~ s/.db$//; # catches DB files
			$fname =~ s/.gdbm$//; # catches gdbm files
			open(TEXT,$output_type.$fname) or return "err: can't write to text version of file";
			$hastext=1;
		}
		if ($type eq "w")
		{
			# Overwriting the db. Delete all values first
			foreach $k (keys %content)
			{
				delete($content{$k});
			}
		}
		foreach $k (keys %$data)
		{
			$content{$k} = $data->{$k};
			print TEXT "$k:		",$data->{$k},"\n" if ($hastext);
		}
	    untie %content;
	    close TEXT if ($hastext);
	}
	elsif ($files->{$file}->{'type'} eq "access")
	{
		if (ref($data) ne "ARRAY")
		{
			return "err: wrong data type";
		}
		open(OUT,$output_type.$files->{$file}->{'path'}) or return "err: can't open file";
		foreach $l (@$data)
		{
			print OUT $l,"\n";
		}
		close OUT;
	}
	if (defined($files->{$file}->{'postcmd'}))
	{
		my $cmd = $files->{$file}->{'postcmd'};
		my $result = `$cmd 2>&1`;
		my $code = ($?) ? "err" : "ok";
		return "$code: $result\n";
	}
	return "ok";
}

sub load_files()
{
	$loc = shift;
	return if (! -r $loc);
	open(IN,$loc) or return;
	$json_data = join('',<IN>);
	close IN;
	$files = from_json($json_data);
	return;
}

sub process_exch_cmd()
{
	my ($server,$port,$cmd) = @_;
	my $sock = IO::Socket::INET->new("$server:$port");
	if ($sock)
	{
		$junk = <$sock>;	# wait for "ok" prompt
		print $sock "$cmd\n";
		@res = <$sock>;
		close $sock;
	}
	else
	{
		@res = ["err Connection error: $@"];
	}

	return join("",@res);
}

sub _decode()
{
	# See if subject needs decoding, a la =?utf-8?Q?hello?=
	my $subj = shift;
	if ($subj =~ /=\?[^?]+\?([QB])\?(.*)\?=$/)
	{
		$subj = $2;
		if ($1 eq "B")
		{
			$subj = decode_base64($subj);
		}
	}
	return $subj;
}
